# frozen_string_literal: true

require "singleton"

module OpenHAB
  module Core
    module Things
      #
      # Wraps all Things in a delegator to underlying set and provides lookup method
      #
      class Registry
        include LazyArray
        include Singleton

        # Gets a specific thing by name in the format binding_id:type_id:thing_id or via the ThingUID
        # @return Thing specified by name/UID or nil if name/UID does not exist in thing registry
        def [](uid)
          uid = generate_thing_uid(uid) unless uid.is_a?(org.openhab.core.thing.ThingUID)
          thing = $things.get(uid)
          return unless thing

          logger.trace("Retrieved Thing(#{thing}) from registry for uid: #{uid}")
          Thing.new(thing)
        end
        alias_method :include?, :[]
        alias_method :key?, :[]

        # explicit conversion to array
        def to_a
          $things.getAll.map { |thing| Thing.new(thing) }
        end

        # Enter the Thing Builder DSL.
        # @yield [DSL::Things::Builder] Builder object.
        def build(&block)
          DSL::Things::Builder.new.instance_eval(&block)
        end

        private

        # Returns a ThingUID given a string like object
        #
        # @return ThingUID generated by given name
        def generate_thing_uid(uid)
          org.openhab.core.thing.ThingUID.new(*uid.split(":"))
        end
      end
    end
  end
end
